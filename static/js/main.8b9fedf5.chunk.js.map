{"version":3,"sources":["components/FeedbackData.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["FeedbackData","id","question","options","Quiz","state","userAnswer","currentQuestion","quizEnd","disabled","startFeedback","setState","questions","nextQuestionHandler","console","log","checkAnswer","answer","finishHandler","length","this","prevProps","prevState","className","map","option","key","onClick","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8b9fedf5.chunk.js","sourcesContent":["export const FeedbackData = [\n  {\n    id: 0,\n    question: ` The Thrust Leader understands the topic`,\n    options: [`Very Much`, `Kind Of`, `Not At All`]\n  },\n  {\n    id: 1,\n    question: `The Thrust Leader shows respect towards students and encourages class participation`,\n    options: [`A lot`, `Sometimes`, `Never`]\n  },\n  {\n    id: 3,\n    question: `Today's class was Boring`,\n    options: [`yup!`, `Kind of`, `Nahhh`]\n  },\n  {\n    id: 4,\n    question: `I learned some things from today's Lesson`,\n    options: [`I really did`, `Kind Of`, `Nothing`]\n  }\n];\n","import React, { Component } from \"react\";\r\nimport { FeedbackData } from \"./FeedbackData\";\r\nimport { truncate } from \"fs\";\r\n\r\nclass Quiz extends Component {\r\n  state = {\r\n    userAnswer: null,\r\n    currentQuestion: 0,\r\n    options: [],\r\n    quizEnd: false,\r\n    disabled: true\r\n  };\r\n\r\n  startFeedback = () => {\r\n    const { currentQuestion } = this.state;\r\n    this.setState(() => {\r\n      return {\r\n        questions: FeedbackData[currentQuestion].question,\r\n        options: FeedbackData[currentQuestion].options\r\n      };\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.startFeedback();\r\n  }\r\n\r\n  nextQuestionHandler = () => {\r\n    this.setState({\r\n      currentQuestion: this.state.currentQuestion + 1\r\n    });\r\n    console.log(this.state.currentQuestion);\r\n  };\r\n\r\n  // updates the component\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { currentQuestion } = this.state;\r\n    if (this.state.currentQuestion !== prevState.currentQuestion) {\r\n      this.setState(() => {\r\n        return {\r\n          disabled: true,\r\n          questions: FeedbackData[currentQuestion].question,\r\n          options: FeedbackData[currentQuestion].options\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  //check answer\r\n  checkAnswer = answer => {\r\n    this.setState({\r\n      userAnswer: answer,\r\n      disabled: false\r\n    });\r\n  };\r\n\r\n  //button to end the feedback\r\n  finishHandler = () => {\r\n    if (this.state.currentQuestion === FeedbackData.length - 1) {\r\n      this.setState({\r\n        quizEnd: true\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    const {\r\n      questions,\r\n      options,\r\n      currentQuestion,\r\n      userAnswer,\r\n      quizEnd\r\n    } = this.state;\r\n\r\n    //block to send result to server\r\n    if (quizEnd) {\r\n      return (\r\n        <div>\r\n          <h2>Thank You!!! Your Feedback Has Been Submitted</h2>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <h2>{questions}</h2>\r\n        <span>{`Questions ${currentQuestion} out of ${FeedbackData.length -\r\n          1}`}</span>\r\n        {options.map(option => (\r\n          <p\r\n            key={option.id}\r\n            className={`ui floating message options ${\r\n              userAnswer === option ? \"selected\" : null\r\n            }`}\r\n            onClick={() => this.checkAnswer(option)}\r\n          >\r\n            {option}\r\n          </p>\r\n        ))}\r\n\r\n        {currentQuestion < FeedbackData.length - 1 && (\r\n          <button\r\n            //semantic ui buttons\r\n            className=\"ui inverted button\"\r\n            disabled={this.state.disabled}\r\n            onClick={this.nextQuestionHandler}\r\n          >\r\n            NEXT\r\n          </button>\r\n        )}\r\n\r\n        {currentQuestion === FeedbackData.length - 1 && (\r\n          <button\r\n            className=\"ui inverted button\"\r\n            disabled={this.state.disabled}\r\n            onClick={this.finishHandler}\r\n          >\r\n            FINISH\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Quiz from \"./components/Quiz\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./styles.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}